// MIT Licensed (see LICENSE.md).

class CameraController : LightningComponent
{
  [Dependency] var Orientation : Orientation;
  
  [Property] var MovementOrientation : CogPath;
  
  [Property] var Speed : Real = 5.0;
  
  [Property] var LeftKey : Keys = Keys.A;
  [Property] var RightKey : Keys = Keys.D;
  [Property] var ForwardKey : Keys = Keys.W;
  [Property] var BackKey : Keys = Keys.S;
  
  [Property] var TestArchetype : Archetype;
  
  
  function Initialize(init : CogInitializer)
  {
    Plasma.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    Plasma.Connect(this.Space, Events.LeftMouseDown, this.OnMouseDown);
  }

  function OnLogicUpdate(event : UpdateEvent)
  {
    var movement = Real3(0, 0, 0);
    if (Plasma.Keyboard.KeyIsDown(this.LeftKey))
      movement -= this.MovementOrientation.Orientation.WorldRight;
    if (Plasma.Keyboard.KeyIsDown(this.RightKey))
      movement += this.MovementOrientation.Orientation.WorldRight;
    if (Plasma.Keyboard.KeyIsDown(this.ForwardKey))
      movement += this.MovementOrientation.Orientation.WorldForward;
    if (Plasma.Keyboard.KeyIsDown(this.BackKey))
      movement -= this.MovementOrientation.Orientation.WorldForward;
      
    this.MovementOrientation.Transform.Translation += movement * this.Speed * event.Dt;
    
  }
  
  function OnMouseDown(event : ViewportMouseEvent)
  {    
    var castResultRange = this.Space.PhysicsSpace.CastRay(event.WorldRay, 1);
    
    foreach(var castResult in castResultRange)
    {
      var distance = castResult.Distance;
      var endPos = event.WorldRay.Start + event.WorldRay.Direction * distance;
      
      this.Space.CreateAtPosition(this.TestArchetype, endPos);
    }
  }
}
